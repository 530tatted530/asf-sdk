apply plugin: 'com.android.library'

android {
  compileSdkVersion COMPILE_SDK_VERSION
  buildToolsVersion '28.0.3'

  flavorDimensions "iab"

  defaultConfig {
    minSdkVersion MIN_SDK_VERSION
    targetSdkVersion TARGET_SDK_VERSION
    versionCode 11
    versionName "1.3.4"
    multiDexEnabled true
  }

  signingConfigs {
    release {
      storeFile = file(project.APPCOINS_WALLET_STORE_FILE)
      storePassword = project.APPCOINS_WALLET_STORE_PASSWORD
      keyAlias = project.APPCOINS_WALLET_KEY_ALIAS
      keyPassword = project.APPCOINS_WALLET_KEY_PASSWORD
    }
  }

  buildTypes {
    debug {
      minifyEnabled false
      buildConfigField 'String', 'BDS_WALLET_PACKAGE_NAME',
          project.BDS_WALLET_PACKAGE_NAME_DEV
      buildConfigField 'String', 'HOST_WS',
          "\"" + project.ROPSTEN_NETWORK_BACKEND_BASE_HOST_WS + "\""
    }
    release {
      buildConfigField 'String', 'BDS_WALLET_PACKAGE_NAME',
          project.BDS_WALLET_PACKAGE_NAME
      buildConfigField 'String', 'HOST_WS',
          "\"" +project.MAIN_NETWORK_BACKEND_BASE_HOST_WS + "\""
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  productFlavors {
    appcoinsiab {
      dimension "iab"
      buildConfigField "String", "IAB_UPDATE_ACTION",
          "\"" + project.APPCOINS_IAB_UPDATE_ACTION + "\""
      libraryVariants.all { variant ->
        if (variant.buildType.getName().equalsIgnoreCase("debug")) {
          buildConfigField "String", "IAB_BIND_ACTION",
              "\"" + project.APPCOINS_DEV_IAB_BIND_ACTION + "\""
          buildConfigField "String", "IAB_BIND_PACKAGE",
              "\"" + project.APPCOINS_DEV_IAB_BIND_PACKAGE + "\""
          buildConfigField "String", "IAB_WALLET_ADDR",
              "\"" + project.APPCOINS_DEV_IAB_WALLET_ADDR + "\""
          buildConfigField "String", "IAB_KEY",
              "\"" + project.APPCOINS_DEV_IAB_KEY + "\""
          buildConfigField 'String', 'MAIN_NETWORK_BACKEND_BASE_HOST_WS',
              "\"" + project.MAIN_NETWORK_BACKEND_BASE_HOST_WS + "\""
          buildConfigField 'String', 'ROPSTEN_NETWORK_BACKEND_BASE_HOST_WS',
              "\"" + project.ROPSTEN_NETWORK_BACKEND_BASE_HOST_WS + "\""
          variant.getMergedFlavor().manifestPlaceholders =
              [iabPermission: project.APPCOINS_IAB_PERMISSION]
        } else {
          buildConfigField "String", "IAB_KEY",
              "\"" + project.APPCOINS_IAB_KEY + "\""
          buildConfigField "String", "IAB_BIND_ACTION",
              "\"" + project.APPCOINS_IAB_BIND_ACTION + "\""
          buildConfigField "String", "IAB_BIND_PACKAGE",
              "\"" + project.APPCOINS_IAB_BIND_PACKAGE + "\""
          buildConfigField "String", "IAB_WALLET_ADDR",
              "\"" + project.APPCOINS_IAB_WALLET_ADDR + "\""
          buildConfigField 'String', 'NETWORK_BACKEND_BASE_HOST_WS',
              "\"" + project.MAIN_NETWORK_BACKEND_BASE_HOST_WS + "\""
          buildConfigField 'String', 'ROPSTEN_NETWORK_BACKEND_BASE_HOST_WS',
              "\"" + project.ROPSTEN_NETWORK_BACKEND_BASE_HOST_WS + "\""
          variant.getMergedFlavor().manifestPlaceholders =
              [iabPermission: project.APPCOINS_IAB_PERMISSION]
        }
      }
    }
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation 'com.google.code.gson:gson:2.8.5'
  api project(path: ':appcoins-billing')
}